##OpenPPL_License_Text##
//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for OpenPPL.
//   These functions will be loaded by OpenHoldem in the background
//   and will be available both for OpenPPL and OH-script users.
//   This library is mostly written in OH-script,
//   but it can be extended by OpenPPL-functions, as both formats are 100% compatible.
//
// OpenPPL is part of the OpenHoldem project
//   Source code:           https://github.com/OpenHoldem/openholdembot/
//   Source code:           https://github.com/OpenHoldem/openholdembot/releases
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 11.2.0 or later
//
// Contributors:
//   Bob3456
//   ChuckNeverMuck
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Fqfq	
//   Gecko
//   JConner
//   Johnny
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Narfal
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Relhby
//   Salem
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
// OpenPPL - HandStrength Symbols Omaha
//
//*****************************************************************************

##RankOfTopPairInHand##
// Searching PairInHand rank, top to down
hand$AA ? 14 :
hand$KK ? 13 :
hand$QQ ? 12 :
hand$JJ ? 11 :
hand$TT ? 10 :
hand$99 ? 9 :
hand$88 ? 8 :
hand$77 ? 7 :
hand$66 ? 6 :
hand$55 ? 5 :
hand$44 ? 4 :
hand$33 ? 3 :
hand$22 ? 2 :
HINT_There_Is_No_Pair_In_Hand__MinusOne

##RankOfBottomPairInHand##      
// Searching PairInHand rank, down to top
hand$22 ? 2 :   
hand$33 ? 3 :   
hand$44 ? 4 :   
hand$55 ? 5 :   
hand$66 ? 6 :   
hand$77 ? 7 :   
hand$88 ? 8 :   
hand$99 ? 9 :   
hand$TT ? 10 :   
hand$JJ ? 11 :   
hand$QQ ? 12 :   
hand$KK ? 13 :   
HINT_There_Is_No_Pair_In_Hand__MinusOne  	

##HINT_There_Is_No_Pair_In_Hand__MinusOne##
-1

##Omaha_HadOverPairOnFlop##
WHEN RankOfTopPairInHand > TopFlopCard RETURN true FORCE

##Omaha_HadOverPairOnTurn##
WHEN RankOfTopPairInHand > TopFlopCard
AND RankOfTopPairInHand > TurnCard  RETURN true FORCE


##Omaha_HadSecondOverPairOnFlop##
RankOfTopPairInHand < TopFlopCard
AND RankOfTopPairInHand > SecondTopFlopCard

##Omaha_HadSecondOverPairOnTurn##
HadSecondOverPairOnFlop AND ((TurnCard == TopFlopCard) OR (TurnCard < TopFlopCard))


##Omaha_HadPairOnFlop##
WHEN Omaha_PairInHand RETURN true FORCE
WHEN BitCount(RankBitsCommonFlop BitAnd rankbitsplayer) > 0 RETURN true FORCE

##Omaha_HadPairOnTurn##
// We already had a pair at the flop...
WHEN Omaha_HadPairOnFlop RETURN true FORCE
// ...or got a new one at the turn
WHEN (((rankbitsplayer >> TurnCard) BitAnd 1) == 1) RETURN true FORCE


##TopPairInHandPairsTheFlop##
WHEN RankOfTopPairInHand == FirstFlopCard 
OR RankOfTopPairInHand == SecondFlopCard 
OR RankOfTopPairInHand == ThirdFlopCard RETURN true FORCE

##BottomPairInHandPairsTheFlop##
WHEN RankOfBottomPairInHand == FirstFlopCard 
OR RankOfBottomPairInHand == SecondFlopCard 
OR RankOfBottomPairInHand == ThirdFlopCard RETURN true FORCE

##Omaha_HadSetOnFlop##
WHEN TopPairInHandPairsTheFlop 
OR BottomPairInHandPairsTheFlop RETURN true FORCE

##Omaha_HadSetOnTurn##
WHEN HadSetOnFlop 
OR RankOfTopPairInHand == TurnCard 
OR RankOfBottomPairInHand == TurnCard RETURN true FORCE

##Omaha_HadTopPairOnFlop##
WHEN RankOfFirstHoleCard == HighestRankOnFlop
OR RankOfSecondHoleCard == HighestRankOnFlop
OR RankOfThirdHoleCard == HighestRankOnFlop
OR RankOfFourthHoleCard == HighestRankOnFlop

##Omaha_HadSecondTopPairOnFlop##
WHEN RankOfFirstHoleCard == SecondTopFlopCard
OR RankOfSecondHoleCard == SecondTopFlopCard
OR RankOfThirdHoleCard == SecondTopFlopCard
OR RankOfFourthHoleCard == SecondTopFlopCard

##Omaha_HadTopPairOnTurn##
RankOfFirstHoleCard == HighestRankOnTurn
OR RankOfSecondHoleCard == HighestRankOnTurn
OR RankOfThirdHoleCard == HighestRankOnTurn
OR RankOfFourthHoleCard == HighestRankOnTurn


##ThirdHoleCardPairsTheFlop##
WHEN (RankOfThirdHoleCard == FirstFlopCard) RETURN true FORCE
WHEN (RankOfThirdHoleCard == SecondFlopCard) RETURN true FORCE
WHEN (RankOfThirdHoleCard == ThirdFlopCard) RETURN true FORCE
WHEN Others RETURN false FORCE

##FourthHoleCardPairsTheFlop##
WHEN (RankOfFourthHoleCard == FirstFlopCard) RETURN true FORCE
WHEN (RankOfFourthHoleCard == SecondFlopCard) RETURN true FORCE
WHEN (RankOfFourthHoleCard == ThirdFlopCard) RETURN true FORCE
WHEN Others RETURN false FORCE

##Omaha_HadTwoPairOnFlop##
WHEN FirstHoleCardPairsTheFlop AND SecondHoleCardPairsTheFlop RETURN true FORCE
WHEN FirstHoleCardPairsTheFlop AND ThirdHoleCardPairsTheFlop RETURN true FORCE
WHEN FirstHoleCardPairsTheFlop AND FourthHoleCardPairsTheFlop RETURN true FORCE
WHEN SecondHoleCardPairsTheFlop AND ThirdHoleCardPairsTheFlop RETURN true FORCE
WHEN SecondHoleCardPairsTheFlop AND FourthHoleCardPairsTheFlop RETURN true FORCE
WHEN ThirdHoleCardPairsTheFlop AND FourthHoleCardPairsTheFlop RETURN true FORCE
WHEN Others RETURN false FORCE    


##Omaha_HaveGoodBackdoorStraightDrawAKQJT##


##Omaha_HaveGoodBackdoorStraightDrawKQJT9##


##Omaha_HaveGoodBackdoorStraightDrawQJT98##


##Omaha_HaveGoodBackdoorStraightDrawJT987##


##Omaha_HaveGoodBackdoorStraightDrawT9876##


##Omaha_HaveGoodBackdoorStraightDraw98765##


##Omaha_HaveGoodBackdoorStraightDraw87654##


##Omaha_HaveGoodBackdoorStraightDraw76543##


##Omaha_HaveGoodBackdoorStraightDraw65432##


##Omaha_HaveGoodBackdoorStraightDraw54321##


##Omaha_HaveBackdoorStraightDraw##


##Omaha_HaveSecondBestKicker##


##Omaha_HaveSecondBestKickerOrBetter##


##Omaha_HaveSecondBestOverPair##
hand$KK AND (BestBoardCard < king)


##Omaha_HaveSecondNutFlush##


##Omaha_HaveSecondNutFlushDraw##


##Omaha_HaveSecondNutStraight##



##Omaha_HaveSecondOverPair##
RankOfTopPairInHand < BestBoardCard AND RankOfTopPairInHand > SecondBestBoardCard


##Omaha_HaveSecondTopSet##
RankOfTopPairInHand > 0
AND (RankOfTopPairInHand == SecondBestBoardCard OR RankOfBottomPairInHand == SecondBestBoardCard)


##Omaha_HaveThirdBestKicker##


##Omaha_HaveThirdBestKickerOrBetter##


##Omaha_HaveThirdBestOverPair##
hand$QQ AND (BestBoardCard < queen)


##Omaha_HaveThirdNutFlush##


##Omaha_HaveThirdNutFlushDraw##


##Omaha_HaveThirdOverPair##
(RankOfTopPairInHand < SecondBestBoardCard) AND (RankOfTopPairInHand > ThirdBestBoardCard)


##Omaha_TopPairRank##
HaveTopPair ? BestBoardCard : 0

##Omaha_SecondTopPairRank##
HaveSecondTopPair ? SecondBestBoardCard : 0

##Omaha_ThirdTopPairRank##
HaveThirdTopPair ? ThirdBestBoardCard : 0

##Omaha_FourthTopPairRank##
HaveFourthTopPair ? FourthBestBoardCard : 0

##Omaha_FifthTopPairRank##
HaveFifthTopPair ? FifthBestBoardCard : 0

##Omaha_HaveThirdTopSet##
RankOfTopPairInHand > 0
AND (RankOfTopPairInHand == ThirdBestBoardCard OR RankOfBottomPairInHand == ThirdBestBoardCard)


##Omaha_HaveFourthNutFlush##


##Omaha_HaveFourthNutFlushDraw##


##Omaha_HaveFourthOverPair##
(RankOfTopPairInHand < ThirdBestBoardCard) AND (RankOfTopPairInHand > FourthBestBoardCard)

##Omaha_HaveFourthTopSet##
RankOfTopPairInHand > 0
AND (RankOfTopPairInHand == FourthBestBoardCard OR RankOfBottomPairInHand == FourthBestBoardCard)


##Omaha_HaveFifthNutFlush##


##Omaha_HaveFifthNutFlushDraw##


##Omaha_HaveFifthOverPair##
(RankOfTopPairInHand < FourthBestBoardCard) AND (RankOfTopPairInHand > FifthBestBoardCard)


##Omaha_HaveBackdoorNutFlushDraw##


##Omaha_HaveBackdoorSecondNutFlushDraw##


##Omaha_HaveBackdoorThirdNutFlushDraw##
 
 
##Omaha_HaveBackdoorFlushDraw##


##Omaha_HaveBestKicker##


##Omaha_HaveBestKickerOrBetter##


##Omaha_HaveBestOverPair##
hand$AA AND (BestBoardCard < ace)


##Omaha_HaveBottomPair##
(((rankbitsplayer >> LowestBoardCard) BitAnd 1) == 1)

##Omaha_HaveSecondBottomPair##
(((rankbitsplayer >> SecondLowestBoardCard) BitAnd 1) == 1)


##Omaha_HaveBottomSet##
RankOfTopPairInHand == LowestBoardCard
OR RankOfBottomPairInHand == LowestBoardCard


##Omaha_HaveBottomTrips##
RankOfFirstHoleCard == RankOfBottomPairOnBoard
OR RankOfSecondHoleCard == RankOfBottomPairOnBoard
OR RankOfThirdHoleCard == RankOfBottomPairOnBoard
OR RankOfFourthHoleCard == RankOfBottomPairOnBoard


##Omaha_HaveBottomTwoPair##
WHEN NOT Omaha_HaveTwoPair RETURN false FORCE
WHEN HaveBottomPair AND HaveSecondBottomPair RETURN true FORCE

##HaveTwoPairOverTopPairOnBoard##
BitCount[((rankbitsplayer BitAnd rankbitscommon) >> RankOfTopPairOnBoard) >= 2]


##Omaha_HaveDoubleGutshotDraw##


##Omaha_HaveFlush##


##Omaha_FlushDraw_Counter##
  (BitCount(suitbitsplayer_clubs BitAnd ConstAllRanksWithoutAceLow)    >= 2 & BitCount(suitbitscommon_clubs BitAnd ConstAllRanksWithoutAceLow)    == 2 ? 1 : 0)
+ (BitCount(suitbitsplayer_diamonds BitAnd ConstAllRanksWithoutAceLow) >= 2 & BitCount(suitbitscommon_diamonds BitAnd ConstAllRanksWithoutAceLow) == 2 ? 1 : 0)
+ (BitCount(suitbitsplayer_hearts BitAnd ConstAllRanksWithoutAceLow)   >= 2 & BitCount(suitbitscommon_hearts BitAnd ConstAllRanksWithoutAceLow)   == 2 ? 1 : 0)
+ (BitCount(suitbitsplayer_spades BitAnd ConstAllRanksWithoutAceLow)   >= 2 & BitCount(suitbitscommon_clubs BitAnd ConstAllRanksWithoutAceLow)    == 2 ? 1 : 0)

##Omaha_HaveFlushDraw##
Omaha_FlushDraw_Counter > 0

##Omaha_HaveDoubleFlushDraw##
Omaha_FlushDraw_Counter == 2


##Omaha_HaveFullHouse##
(HaveSet AND PairOnBoard)
OR (RankOfTopPairInHand > 0 AND TripsOnBoard)
OR (HaveTrips AND HaveTwoPair)


##Omaha_HaveNothing##
NOT HavePair AND NOT (Overcards == 2) AND NOT HaveBestOverPairOrBetter AND NOT HaveBackdoorFlushDraw AND NOT HaveStraightDraw AND NOT HaveInsideStraightDraw AND NOT HaveFlushDraw
// AND NOT HaveBackdoorStraightDraw

##Omaha_HaveNutFlush##


##Omaha_HaveNutFlushCard##


##Omaha_HaveNutFlushDraw##
 
 
##Omaha_HaveNutStraight##


##Omaha_MyKicker##


##Omaha_NumberOfBetterKickers##


##Omaha_HaveNutStraightDraw##


##Omaha_HaveUnDiscountedNutStraightDraw##


##Omaha_HaveInsideNutStraightDraw##


##Omaha_HaveInsideStraightDraw##


##Omaha_HaveNuts##


##Omaha_HigherStraightFlushPossible##


##Omaha_HaveNutStraightFlush##


##Omaha_HaveOpenEndedStraightDraw##


##Omaha_HaveQuads##
WHEN NOT PairOnBoard RETURN false FORCE
WHEN TripsOnBoard AND (((rankbitsplayer >> trankcommon) BitAnd 1) == 1) RETURN true FORCE
WHEN RankOfTopPairOnBoard == RankOfTopPairInHand RETURN true FORCE
WHEN RankOfTopPairOnBoard == RankOfBottomPairInHand RETURN true FORCE
WHEN RankOfBottomPairOnBoard == RankOfTopPairInHand RETURN true FORCE
WHEN RankOfBottomPairOnBoard == RankOfBottomPairInHand RETURN true FORCE


##Omaha_HaveOverPair##
RankOfTopPairInHand > BestBoardCard


##Omaha_HavePair##
(rankbitsplayer BitAnd rankbitscommon) > 0 


##Omaha_HavePocketPair##
RankOfTopPairInHand > 0


##Omaha_HaveRunnerRunnerFlushAtRiver##


##TopPairInHandPairsTheBoard##
RankOfTopPairInHand==FirstFlopCard
OR RankOfTopPairInHand==SecondFlopCard
OR RankOfTopPairInHand==ThirdFlopCard
OR RankOfTopPairInHand==TurnCard
OR RankOfTopPairInHand==RiverCard

##BottomPairInHandPairsTheBoard##
RankOfBottomPairInHand==FirstFlopCard
OR RankOfBottomPairInHand==SecondFlopCard
OR RankOfBottomPairInHand==ThirdFlopCard
OR RankOfBottomPairInHand==TurnCard
OR RankOfBottomPairInHand==RiverCard

##Omaha_HaveSet##
TopPairInHandPairsTheBoard OR BottomPairInHandPairsTheBoard


##Omaha_HaveTopTrips##
RankOfFirstHoleCard == RankOfTopPairOnBoard
OR RankOfSecondHoleCard == RankOfTopPairOnBoard
OR RankOfThirdHoleCard == RankOfTopPairOnBoard
OR RankOfFourthHoleCard == RankOfTopPairOnBoard


##Omaha_HaveTrips##
Omaha_HaveTopTrips OR Omaha_HaveBottomTrips


##Omaha_HaveStraightDraw##


##Omaha_HaveStraightFlush##


##Omaha_HaveTopNonBoardPairedPair##


##Omaha_HaveTopSet##
RankOfTopPairInHand == BestBoardCard
OR RankOfBottomPairInHand == BestBoardCard


##Omaha_HaveTopTwoPair##
WHEN HaveTopPair AND HaveSecondTopPair RETURN true FORCE


##Omaha_HaveTwoPair##
// At least 2 of our cards must pair the board
WHEN NOT [BitCount(rankbitsplayer & rankbitscommon & ConstAllRanksWithoutAceLow) >= 2] RETURN false FORCE
// Check for higher pairs on board that devalue our "three pairs"
WHEN PairOnBoard AND NOT HaveTwoPairOverTopPairOnBoard RETURN false FORCE
WHEN Others RETURN true FORCE


##Omaha_HaveWeakBackdoorStraightDraw##


##Omaha_HaveWeakDoubleGutshotDraw##


##Omaha_HaveWeakFlush##


##Omaha_HaveWeakFlushDraw##


##Omaha_HaveWeakInsideStraightDraw##


##Omaha_HaveWeakStraight##


##Omaha_HaveWeakStraightDraw##


##Omaha_Overcards##
(betround < flop) ? 0 : [
  (RankOfFirstHoleCard  > BestBoardCard)
+ (RankOfSecondHoleCard > BestBoardCard)
+ (RankOfThirdHoleCard  > BestBoardCard)
+ (RankOfFourthHoleCard > BestBoardCard)
]

##Omaha_HaveUnderPair##
RankOfTopPairInHand > 0
AND RankOfTopPairInHand < ranklocommon


##Omaha_HaveUnderStraight##


##Omaha_PairInHand##
RankOfTopPairInHand > 0

##Omaha_RunnerRunnerFlushPossibleAtRiver##


##Omaha_SuitsInHand##
  (suitbitsplayer_clubs    ? 1 : 0)
+ (suitbitsplayer_diamonds ? 1 : 0)
+ (suitbitsplayer_hearts   ? 1 : 0)
+ (suitbitsplayer_spades   ? 1 : 0)

//*****************************************************************************
//
// OpenPPL - HandStrength Symbols Omaha only
//   (but some of them might be useful for Hold'em too)
//
//*****************************************************************************

##ConstRankBitsPlayerLowCards##
// player bits 8..ace(low), last bit is unused.
(rankbitsplayer BitAnd 0b111111110)

##LowCardsInHand##
// The number of unique low cards in our hand, especially for Hi/Lo
BitCount(ConstRankBitsPlayerLowCards)

##Double_Suited##
WHEN SuitsInHand != 2 RETURN false FORCE
// Suits xxyy
WHEN (FirstHoleCardSuit == SecondHoleCardSuit AND ThirdHoleCardSuit  == FourthHoleCardSuit) RETURN true FORCE
// Suits xyxy
WHEN (FirstHoleCardSuit == ThirdHoleCardSuit  AND SecondHoleCardSuit == FourthHoleCardSuit) RETURN true FORCE
// Suits xyyx
WHEN (FirstHoleCardSuit == FourthHoleCardSuit AND SecondHoleCardSuit == ThirdHoleCardSuit) RETURN true FORCE

##FourCardStraightInHand##
// A234, 2345 ... QAKJ
// If we have hand$A2, rankloplayer will be 2 but we need to start from Ace(low)
// In this case we just subtract 1 so jump to ace low, any other case we can start simply from rankloplayer.
BitCount[((rankbitsplayer >> (rankloplayer - hand$A2)) BitAnd 0b1111)] == 4


##Have10OutStraightDraw##

##Have12OutStraightDraw##

##Have16OutStraightDraw##

##HaveSecondNutLow##

##HaveSecondNutLowDraw##

##HaveThirdNutLow##

##HaveThirdNutLowDraw##

##HaveFourthNutLow##

##HaveFourthNutLowDraw##

##HaveLow##

##HaveNutLow##

##HaveNutLowBackdoorDraw##

##HaveNutLowDraw##

##HaveNutLowDrawWithBackup##

##HaveNutLowWithBackup##

##ThreeCardStraightInHand##
// first with Ace-low (A23)
   [BitCount((rankbitsplayer >> 1) BitAnd 0b111) == 3]
OR [BitCount((rankbitsplayer >> RankOfFirstHoleCard)  BitAnd 0b111) == 3]
OR [BitCount((rankbitsplayer >> RankOfSecondHoleCard) BitAnd 0b111) == 3]
OR [BitCount((rankbitsplayer >> RankOfThirdHoleCard)  BitAnd 0b111) == 3]
OR [BitCount((rankbitsplayer >> RankOfFourthHoleCard) BitAnd 0b111) == 3]


##ThreeCardsWithOneGapInHand##
// Shanky def: True if the bot has three cards in sequence with 1 gap in the hole.
// Example: 568A.
   [BitCount((rankbitsplayer >> 1) BitAnd 0b1111) == 3]
OR [BitCount((rankbitsplayer >> RankOfFirstHoleCard)  BitAnd 0b1111) == 3]
OR [BitCount((rankbitsplayer >> RankOfSecondHoleCard) BitAnd 0b1111) == 3]
OR [BitCount((rankbitsplayer >> RankOfThirdHoleCard)  BitAnd 0b1111) == 3]
OR [BitCount((rankbitsplayer >> RankOfFourthHoleCard) BitAnd 0b1111) == 3]

##FourCardsWithOneGapInHand##
// Shanky def:
// True if the bot has 4 cards in sequence with 1 gap in the hole, for example 5689.
WHEN FourCardStraightInHand RETURN false FORCE
// ********************************************5432A variations
WHEN BitCount(rankbitsplayer BitAnd 0b000000000111110) == 4 RETURN true FORCE     
// Other variations
WHEN BitCount((rankbitsplayer >> rankloplayer) BitAnd 0b11111) == 4 RETURN true FORCE

##FourCardsWithDoubleGapInHand##
// ie. QT97 or QT87
// idea by jbj81, Omaha Coding Info - Shanky Forum
WHEN FourCardStraightInHand RETURN false FORCE
WHEN FourCardsWithOneGapInHand RETURN false FORCE
//                                     --AKQJT98765432a-
WHEN {[BitCount((rankbitsplayer BitAnd 0b111111000000000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b011111100000000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b001111110000000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b000111111000000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b000011111100000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b000001111110000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b000000111111000)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b000000011111100)) == 4]
   OR [BitCount((rankbitsplayer BitAnd 0b000000001111110)) == 4]
} RETURN true FORCE

##TripsInHand##
BitCount rankbitsplayer == 2 AND NOT TwoPairInHand

##PokerInHand##
BitCount(rankbitsplayer & ConstAllRanksWithoutAceLow) == 1

##TwoPairInHand##
WHEN RankOfTopPairInHand < 0 RETURN false FORCE
WHEN RankOfBottomPairInHand < 0 RETURN false FORCE
WHEN RankOfTopPairInHand > RankOfBottomPairInHand RETURN true FORCE


//*****************************************************************************
//
// Straight and StraightDraw
//
//*****************************************************************************

##Omaha_StraightDraw_Outs##
// http://www.countingouts.com/
// http://www.maxinmontreal.com/forums/viewtopic.php?f=326&t=20677
WHEN betround = river RETURN false FORCE
WHEN Omaha_HaveStraight RETURN Omaha_StraightDraw_Outs_We_Have_A_Straight FORCE
WHEN Others RETURN Omaha_StraightDraw_Outs_We_Dont_Have_A_Straight_Yet FORCE

##Omaha_StraightDraw_Outs_We_Have_A_Straight##
WHEN NOT Omaha_HaveStraight RETURN false FORCE
WHEN betround = river RETURN false FORCE
WHEN Others SET me_st_MemOmahaStraightDrawOutsWeHaveAStraight_0
WHEN (Omaha_BestPossibleStraightForUsIfAceHitsTheBoard   > Omaha_HighCardOfOurStraight) AND NOT (board$A) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownAces
WHEN (Omaha_BestPossibleStraightForUsIfKingHitsTheBoard  > Omaha_HighCardOfOurStraight) AND NOT (board$K) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownKings
WHEN (Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard > Omaha_HighCardOfOurStraight) AND NOT (board$Q) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownQueens
WHEN (Omaha_BestPossibleStraightForUsIfJackHitsTheBoard  > Omaha_HighCardOfOurStraight) AND NOT (board$J) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownJacks
WHEN (Omaha_BestPossibleStraightForUsIfTenHitsTheBoard   > Omaha_HighCardOfOurStraight) AND NOT (board$T) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownTens
WHEN (Omaha_BestPossibleStraightForUsIfNineHitsTheBoard  > Omaha_HighCardOfOurStraight) AND NOT (board$9) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownNines
WHEN (Omaha_BestPossibleStraightForUsIfEightHitsTheBoard > Omaha_HighCardOfOurStraight) AND NOT (board$8) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownEights
WHEN (Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard > Omaha_HighCardOfOurStraight) AND NOT (board$7) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownSevens
WHEN (Omaha_BestPossibleStraightForUsIfSixHitsTheBoard   > Omaha_HighCardOfOurStraight) AND NOT (board$6) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownSixes
WHEN (Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard  > Omaha_HighCardOfOurStraight) AND NOT (board$5) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownFives
WHEN (Omaha_BestPossibleStraightForUsIfFourHitsTheBoard  > Omaha_HighCardOfOurStraight) AND NOT (board$4) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownFours
WHEN (Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard > Omaha_HighCardOfOurStraight) AND NOT (board$3) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownThrees
WHEN (Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard   > Omaha_HighCardOfOurStraight) AND NOT (board$2) SET me_add_MemOmahaStraightDrawOutsWeHaveAStraight_UnknownTwos
WHEN Others RETURN me_re_MemOmahaStraightDrawOutsWeHaveAStraight FORCE


##Omaha_StraightDraw_Outs_We_Dont_Have_A_Straight_Yet##
WHEN Omaha_HaveStraight RETURN false FORCE
WHEN betround = river RETURN false FORCE
WHEN Others SET me_st_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_0
WHEN (Omaha_BestPossibleStraightForUsIfAceHitsTheBoard   > 0) AND NOT (board$A) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownAces
WHEN (Omaha_BestPossibleStraightForUsIfKingHitsTheBoard  > 0) AND NOT (board$K) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownKings
WHEN (Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard > 0) AND NOT (board$Q) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownQueens
WHEN (Omaha_BestPossibleStraightForUsIfJackHitsTheBoard  > 0) AND NOT (board$J) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownJacks
WHEN (Omaha_BestPossibleStraightForUsIfTenHitsTheBoard   > 0) AND NOT (board$T) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownTens
WHEN (Omaha_BestPossibleStraightForUsIfNineHitsTheBoard  > 0) AND NOT (board$9) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownNines
WHEN (Omaha_BestPossibleStraightForUsIfEightHitsTheBoard > 0) AND NOT (board$8) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownEights
WHEN (Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard > 0) AND NOT (board$7) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownSevens
WHEN (Omaha_BestPossibleStraightForUsIfSixHitsTheBoard   > 0) AND NOT (board$6) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownSixes
WHEN (Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard  > 0) AND NOT (board$5) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownFives
WHEN (Omaha_BestPossibleStraightForUsIfFourHitsTheBoard  > 0) AND NOT (board$4) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownFours
WHEN (Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard > 0) AND NOT (board$3) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownThrees
WHEN (Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard   > 0) AND NOT (board$2) SET me_add_MemOmahaStraightDrawOutsWeDontHaveAStraightYet_UnknownTwos
WHEN Others RETURN me_re_MemOmahaStraightDrawOutsWeDontHaveAStraightYet FORCE

##Omaha_NutStraightDraw_Outs##
// not afraid of anything (flushes, fullhouses)
WHEN betround = river RETURN false FORCE
WHEN Others SET me_st_MemOmahaNutStraightDrawOuts_0
WHEN (Omaha_BestPossibleStraightForUsIfAceHitsTheBoard   > 0) AND (Omaha_BestPossibleStraightForUsIfAceHitsTheBoard   >= BestPossibleStraightForVillainIfAceHitsTheBoard)   AND NOT (board$A) SET me_add_MemOmahaNutStraightDrawOuts_UnknownAces
WHEN (Omaha_BestPossibleStraightForUsIfKingHitsTheBoard  > 0) AND (Omaha_BestPossibleStraightForUsIfKingHitsTheBoard  >= BestPossibleStraightForVillainIfKingHitsTheBoard)  AND NOT (board$K) SET me_add_MemOmahaNutStraightDrawOuts_UnknownKings
WHEN (Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard > 0) AND (Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard >= BestPossibleStraightForVillainIfQueenHitsTheBoard) AND NOT (board$Q) SET me_add_MemOmahaNutStraightDrawOuts_UnknownQueens
WHEN (Omaha_BestPossibleStraightForUsIfJackHitsTheBoard  > 0) AND (Omaha_BestPossibleStraightForUsIfJackHitsTheBoard  >= BestPossibleStraightForVillainIfJackHitsTheBoard)  AND NOT (board$J) SET me_add_MemOmahaNutStraightDrawOuts_UnknownJacks
WHEN (Omaha_BestPossibleStraightForUsIfTenHitsTheBoard   > 0) AND (Omaha_BestPossibleStraightForUsIfTenHitsTheBoard   >= BestPossibleStraightForVillainIfTenHitsTheBoard)   AND NOT (board$T) SET me_add_MemOmahaNutStraightDrawOuts_UnknownTens
WHEN (Omaha_BestPossibleStraightForUsIfNineHitsTheBoard  > 0) AND (Omaha_BestPossibleStraightForUsIfNineHitsTheBoard  >= BestPossibleStraightForVillainIfNineHitsTheBoard)  AND NOT (board$9) SET me_add_MemOmahaNutStraightDrawOuts_UnknownNines
WHEN (Omaha_BestPossibleStraightForUsIfEightHitsTheBoard > 0) AND (Omaha_BestPossibleStraightForUsIfEightHitsTheBoard >= BestPossibleStraightForVillainIfEightHitsTheBoard) AND NOT (board$8) SET me_add_MemOmahaNutStraightDrawOuts_UnknownEights
WHEN (Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard > 0) AND (Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard >= BestPossibleStraightForVillainIfSevenHitsTheBoard) AND NOT (board$7) SET me_add_MemOmahaNutStraightDrawOuts_UnknownSevens
WHEN (Omaha_BestPossibleStraightForUsIfSixHitsTheBoard   > 0) AND (Omaha_BestPossibleStraightForUsIfSixHitsTheBoard   >= BestPossibleStraightForVillainIfSixHitsTheBoard)   AND NOT (board$6) SET me_add_MemOmahaNutStraightDrawOuts_UnknownSixes
WHEN (Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard  > 0) AND (Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard  >= BestPossibleStraightForVillainIfFiveHitsTheBoard)  AND NOT (board$5) SET me_add_MemOmahaNutStraightDrawOuts_UnknownFives
WHEN (Omaha_BestPossibleStraightForUsIfFourHitsTheBoard  > 0) AND (Omaha_BestPossibleStraightForUsIfFourHitsTheBoard  >= BestPossibleStraightForVillainIfFourHitsTheBoard)  AND NOT (board$4) SET me_add_MemOmahaNutStraightDrawOuts_UnknownFours
WHEN (Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard > 0) AND (Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard >= BestPossibleStraightForVillainIfThreeHitsTheBoard) AND NOT (board$3) SET me_add_MemOmahaNutStraightDrawOuts_UnknownThrees
WHEN (Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard   > 0) AND (Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard   >= BestPossibleStraightForVillainIfTwoHitsTheBoard)   AND NOT (board$2) SET me_add_MemOmahaNutStraightDrawOuts_UnknownTwos
WHEN Others RETURN me_re_MemOmahaNutStraightDrawOuts FORCE


##Omaha_HaveStraight##
WHEN (Omaha_HighCardOfOurStraight >= Five) RETURN true FORCE

##Omaha_HighCardOfOurStraight##
// We must use two holecards.
[ (BitCount(rankbitscommon & 0b111110000000000)>=3) AND (BitCount(rankbitsplayer & 0b111110000000000)>=2) AND (BitCount(rankbits & 0b111110000000000)=5) ] ? ace :
[ (BitCount(rankbitscommon & 0b011111000000000)>=3) AND (BitCount(rankbitsplayer & 0b011111000000000)>=2) AND (BitCount(rankbits & 0b011111000000000)=5) ] ? king :
[ (BitCount(rankbitscommon & 0b001111100000000)>=3) AND (BitCount(rankbitsplayer & 0b001111100000000)>=2) AND (BitCount(rankbits & 0b001111100000000)=5) ] ? queen :
[ (BitCount(rankbitscommon & 0b000111110000000)>=3) AND (BitCount(rankbitsplayer & 0b000111110000000)>=2) AND (BitCount(rankbits & 0b000111110000000)=5) ] ? jack :
[ (BitCount(rankbitscommon & 0b000011111000000)>=3) AND (BitCount(rankbitsplayer & 0b000011111000000)>=2) AND (BitCount(rankbits & 0b000011111000000)=5) ] ? ten :
[ (BitCount(rankbitscommon & 0b000001111100000)>=3) AND (BitCount(rankbitsplayer & 0b000001111100000)>=2) AND (BitCount(rankbits & 0b000001111100000)=5) ] ? Nine :
[ (BitCount(rankbitscommon & 0b000000111110000)>=3) AND (BitCount(rankbitsplayer & 0b000000111110000)>=2) AND (BitCount(rankbits & 0b000000111110000)=5) ] ? Eight :
[ (BitCount(rankbitscommon & 0b000000011111000)>=3) AND (BitCount(rankbitsplayer & 0b000000011111000)>=2) AND (BitCount(rankbits & 0b000000011111000)=5) ] ? Seven :
[ (BitCount(rankbitscommon & 0b000000001111100)>=3) AND (BitCount(rankbitsplayer & 0b000000001111100)>=2) AND (BitCount(rankbits & 0b000000001111100)=5) ] ? Six  :
[ (BitCount(rankbitscommon & 0b000000000111110)>=3) AND (BitCount(rankbitsplayer & 0b000000000111110)>=2) AND (BitCount(rankbits & 0b000000000111110)=5) ] ? Five  :
HINT_You_Do_Not_Have_A_Straight


##Omaha_BestPossibleStraightForUsIfAceHitsTheBoard##
[(BitCount(RankBitsWithAdditionalAce & 0b111110000000000)=5) AND (BitCount(rankbitscommon & 0b111110000000000)>=2) AND (BitCount(rankbitsplayer & 0b111110000000000)>=2)] ? ace :
[(BitCount(RankBitsWithAdditionalAce & 0b000000000111110)=5) AND (BitCount(rankbitscommon & 0b000000000111110)>=2) AND (BitCount(rankbitsplayer & 0b000000000111110)>=2)] ? Five :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfKingHitsTheBoard##
[(BitCount(RankBitsWithAdditionalKing & 0b111110000000000)=5) AND (BitCount(rankbitscommon & 0b111110000000000)>=2) AND (BitCount(rankbitsplayer & 0b111110000000000)>=2)] ? ace :
[(BitCount(RankBitsWithAdditionalKing & 0b011111000000000)=5) AND (BitCount(rankbitscommon & 0b011111000000000)>=2) AND (BitCount(rankbitsplayer & 0b011111000000000)>=2)] ? king :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard##
[(BitCount(RankBitsWithAdditionalQueen & 0b111110000000000)=5) AND (BitCount(rankbitscommon & 0b111110000000000)>=2) AND (BitCount(rankbitsplayer & 0b111110000000000)>=2)] ? ace :
[(BitCount(RankBitsWithAdditionalQueen & 0b011111000000000)=5) AND (BitCount(rankbitscommon & 0b011111000000000)>=2) AND (BitCount(rankbitsplayer & 0b011111000000000)>=2)] ? king :
[(BitCount(RankBitsWithAdditionalQueen & 0b001111100000000)=5) AND (BitCount(rankbitscommon & 0b001111100000000)>=2) AND (BitCount(rankbitsplayer & 0b001111100000000)>=2)] ? queen :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfJackHitsTheBoard##
[(BitCount(RankBitsWithAdditionalJack & 0b111110000000000)=5) AND (BitCount(rankbitscommon & 0b111110000000000)>=2) AND (BitCount(rankbitsplayer & 0b111110000000000)>=2)] ? ace :
[(BitCount(RankBitsWithAdditionalJack & 0b011111000000000)=5) AND (BitCount(rankbitscommon & 0b011111000000000)>=2) AND (BitCount(rankbitsplayer & 0b011111000000000)>=2)] ? king :
[(BitCount(RankBitsWithAdditionalJack & 0b001111100000000)=5) AND (BitCount(rankbitscommon & 0b001111100000000)>=2) AND (BitCount(rankbitsplayer & 0b001111100000000)>=2)] ? queen :
[(BitCount(RankBitsWithAdditionalJack & 0b000111110000000)=5) AND (BitCount(rankbitscommon & 0b000111110000000)>=2) AND (BitCount(rankbitsplayer & 0b000111110000000)>=2)] ? jack :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfTenHitsTheBoard##
[(BitCount(RankBitsWithAdditionalTen & 0b111110000000000)=5) AND (BitCount(rankbitscommon & 0b111110000000000)>=2) AND (BitCount(rankbitsplayer & 0b111110000000000)>=2)] ? ace :
[(BitCount(RankBitsWithAdditionalTen & 0b011111000000000)=5) AND (BitCount(rankbitscommon & 0b011111000000000)>=2) AND (BitCount(rankbitsplayer & 0b011111000000000)>=2)] ? king :
[(BitCount(RankBitsWithAdditionalTen & 0b001111100000000)=5) AND (BitCount(rankbitscommon & 0b001111100000000)>=2) AND (BitCount(rankbitsplayer & 0b001111100000000)>=2)] ? queen :
[(BitCount(RankBitsWithAdditionalTen & 0b000111110000000)=5) AND (BitCount(rankbitscommon & 0b000111110000000)>=2) AND (BitCount(rankbitsplayer & 0b000111110000000)>=2)] ? jack :
[(BitCount(RankBitsWithAdditionalTen & 0b000011111000000)=5) AND (BitCount(rankbitscommon & 0b000011111000000)>=2) AND (BitCount(rankbitsplayer & 0b000011111000000)>=2)] ? ten :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfNineHitsTheBoard##
[(BitCount(RankBitsWithAdditionalNine & 0b011111000000000)=5) AND (BitCount(rankbitscommon & 0b011111000000000)>=2) AND (BitCount(rankbitsplayer & 0b011111000000000)>=2)] ? king :
[(BitCount(RankBitsWithAdditionalNine & 0b001111100000000)=5) AND (BitCount(rankbitscommon & 0b001111100000000)>=2) AND (BitCount(rankbitsplayer & 0b001111100000000)>=2)] ? queen :
[(BitCount(RankBitsWithAdditionalNine & 0b000111110000000)=5) AND (BitCount(rankbitscommon & 0b000111110000000)>=2) AND (BitCount(rankbitsplayer & 0b000111110000000)>=2)] ? jack :
[(BitCount(RankBitsWithAdditionalNine & 0b000011111000000)=5) AND (BitCount(rankbitscommon & 0b000011111000000)>=2) AND (BitCount(rankbitsplayer & 0b000011111000000)>=2)] ? ten :
[(BitCount(RankBitsWithAdditionalNine & 0b000001111100000)=5) AND (BitCount(rankbitscommon & 0b000001111100000)>=2) AND (BitCount(rankbitsplayer & 0b000001111100000)>=2)] ? Nine :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfEightHitsTheBoard##
[(BitCount(RankBitsWithAdditionalEight & 0b001111100000000)=5) AND (BitCount(rankbitscommon & 0b001111100000000)>=2) AND (BitCount(rankbitsplayer & 0b001111100000000)>=2)] ? queen :
[(BitCount(RankBitsWithAdditionalEight & 0b000111110000000)=5) AND (BitCount(rankbitscommon & 0b000111110000000)>=2) AND (BitCount(rankbitsplayer & 0b000111110000000)>=2)] ? jack :
[(BitCount(RankBitsWithAdditionalEight & 0b000011111000000)=5) AND (BitCount(rankbitscommon & 0b000011111000000)>=2) AND (BitCount(rankbitsplayer & 0b000011111000000)>=2)] ? ten :
[(BitCount(RankBitsWithAdditionalEight & 0b000001111100000)=5) AND (BitCount(rankbitscommon & 0b000001111100000)>=2) AND (BitCount(rankbitsplayer & 0b000001111100000)>=2)] ? Nine :
[(BitCount(RankBitsWithAdditionalEight & 0b000000111110000)=5) AND (BitCount(rankbitscommon & 0b000000111110000)>=2) AND (BitCount(rankbitsplayer & 0b000000111110000)>=2)] ? Eight :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard##
[(BitCount(RankBitsWithAdditionalSeven & 0b000111110000000)=5) AND (BitCount(rankbitscommon & 0b000111110000000)>=2) AND (BitCount(rankbitsplayer & 0b000111110000000)>=2)] ? jack :
[(BitCount(RankBitsWithAdditionalSeven & 0b000011111000000)=5) AND (BitCount(rankbitscommon & 0b000011111000000)>=2) AND (BitCount(rankbitsplayer & 0b000011111000000)>=2)] ? ten :
[(BitCount(RankBitsWithAdditionalSeven & 0b000001111100000)=5) AND (BitCount(rankbitscommon & 0b000001111100000)>=2) AND (BitCount(rankbitsplayer & 0b000001111100000)>=2)] ? Nine :
[(BitCount(RankBitsWithAdditionalSeven & 0b000000111110000)=5) AND (BitCount(rankbitscommon & 0b000000111110000)>=2) AND (BitCount(rankbitsplayer & 0b000000111110000)>=2)] ? Eight :
[(BitCount(RankBitsWithAdditionalSeven & 0b000000011111000)=5) AND (BitCount(rankbitscommon & 0b000000011111000)>=2) AND (BitCount(rankbitsplayer & 0b000000011111000)>=2)] ? Seven :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfSixHitsTheBoard##
[(BitCount(RankBitsWithAdditionalSix & 0b000011111000000)=5) AND (BitCount(rankbitscommon & 0b000011111000000)>=2) AND (BitCount(rankbitsplayer & 0b000011111000000)>=2)] ? ten :
[(BitCount(RankBitsWithAdditionalSix & 0b000001111100000)=5) AND (BitCount(rankbitscommon & 0b000001111100000)>=2) AND (BitCount(rankbitsplayer & 0b000001111100000)>=2)] ? Nine :
[(BitCount(RankBitsWithAdditionalSix & 0b000000111110000)=5) AND (BitCount(rankbitscommon & 0b000000111110000)>=2) AND (BitCount(rankbitsplayer & 0b000000111110000)>=2)] ? Eight :
[(BitCount(RankBitsWithAdditionalSix & 0b000000011111000)=5) AND (BitCount(rankbitscommon & 0b000000011111000)>=2) AND (BitCount(rankbitsplayer & 0b000000011111000)>=2)] ? Seven :
[(BitCount(RankBitsWithAdditionalSix & 0b000000001111100)=5) AND (BitCount(rankbitscommon & 0b000000001111100)>=2) AND (BitCount(rankbitsplayer & 0b000000001111100)>=2)] ? Six :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard##
[(BitCount(RankBitsWithAdditionalFive & 0b000001111100000)=5) AND (BitCount(rankbitscommon & 0b000001111100000)>=2) AND (BitCount(rankbitsplayer & 0b000001111100000)>=2)] ? Nine :
[(BitCount(RankBitsWithAdditionalFive & 0b000000111110000)=5) AND (BitCount(rankbitscommon & 0b000000111110000)>=2) AND (BitCount(rankbitsplayer & 0b000000111110000)>=2)] ? Eight :
[(BitCount(RankBitsWithAdditionalFive & 0b000000011111000)=5) AND (BitCount(rankbitscommon & 0b000000011111000)>=2) AND (BitCount(rankbitsplayer & 0b000000011111000)>=2)] ? Seven :
[(BitCount(RankBitsWithAdditionalFive & 0b000000001111100)=5) AND (BitCount(rankbitscommon & 0b000000001111100)>=2) AND (BitCount(rankbitsplayer & 0b000000001111100)>=2)] ? Six :
[(BitCount(RankBitsWithAdditionalFive & 0b000000000111110)=5) AND (BitCount(rankbitscommon & 0b000000000111110)>=2) AND (BitCount(rankbitsplayer & 0b000000000111110)>=2)] ? Five :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfFourHitsTheBoard##
[(BitCount(RankBitsWithAdditionalFour & 0b000000111110000)=5) AND (BitCount(rankbitscommon & 0b000000111110000)>=2) AND (BitCount(rankbitsplayer & 0b000000111110000)>=2)] ? Eight :
[(BitCount(RankBitsWithAdditionalFour & 0b000000011111000)=5) AND (BitCount(rankbitscommon & 0b000000011111000)>=2) AND (BitCount(rankbitsplayer & 0b000000011111000)>=2)] ? Seven :
[(BitCount(RankBitsWithAdditionalFour & 0b000000001111100)=5) AND (BitCount(rankbitscommon & 0b000000001111100)>=2) AND (BitCount(rankbitsplayer & 0b000000001111100)>=2)] ? Six :
[(BitCount(RankBitsWithAdditionalFour & 0b000000000111110)=5) AND (BitCount(rankbitscommon & 0b000000000111110)>=2) AND (BitCount(rankbitsplayer & 0b000000000111110)>=2)] ? Five :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard##
[(BitCount(RankBitsWithAdditionalThree & 0b000000011111000)=5) AND (BitCount(rankbitscommon & 0b000000011111000)>=2) AND (BitCount(rankbitsplayer & 0b000000011111000)>=2)] ? Seven :
[(BitCount(RankBitsWithAdditionalThree & 0b000000001111100)=5) AND (BitCount(rankbitscommon & 0b000000001111100)>=2) AND (BitCount(rankbitsplayer & 0b000000001111100)>=2)] ? Six :
[(BitCount(RankBitsWithAdditionalThree & 0b000000000111110)=5) AND (BitCount(rankbitscommon & 0b000000000111110)>=2) AND (BitCount(rankbitsplayer & 0b000000000111110)>=2)] ? Five :
HINT_Such_A_Straight_Does_Not_Exist

##Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard##
[(BitCount(RankBitsWithAdditionalTwo & 0b000000001111100)=5) AND (BitCount(rankbitscommon & 0b000000001111100)>=2) AND (BitCount(rankbitsplayer & 0b000000001111100)>=2)] ? Six :
[(BitCount(RankBitsWithAdditionalTwo & 0b000000000111110)=5) AND (BitCount(rankbitscommon & 0b000000000111110)>=2) AND (BitCount(rankbitsplayer & 0b000000000111110)>=2)] ? Five :
HINT_Such_A_Straight_Does_Not_Exist


##Omaha_GetBestPossibleStraightIfAceHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfAceHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfAceHitsTheBoard >= BestPossibleStraightForVillainIfAceHitsTheBoard)

##Omaha_GetBestPossibleStraightIfKingHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfKingHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfKingHitsTheBoard >= BestPossibleStraightForVillainIfKingHitsTheBoard)

##Omaha_GetBestPossibleStraightIfQueenHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfQueenHitsTheBoard >= BestPossibleStraightForVillainIfQueenHitsTheBoard)

##Omaha_GetBestPossibleStraightIfJackHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfJackHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfJackHitsTheBoard >= BestPossibleStraightForVillainIfJackHitsTheBoard)

##Omaha_GetBestPossibleStraightIfTenHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfTenHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfTenHitsTheBoard >= BestPossibleStraightForVillainIfTenHitsTheBoard)

##Omaha_GetBestPossibleStraightIfNineHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfNineHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfNineHitsTheBoard >= BestPossibleStraightForVillainIfNineHitsTheBoard)

##Omaha_GetBestPossibleStraightIfEightHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfEightHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfEightHitsTheBoard >= BestPossibleStraightForVillainIfEightHitsTheBoard)

##Omaha_GetBestPossibleStraightIfSevenHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfSevenHitsTheBoard >= BestPossibleStraightForVillainIfSevenHitsTheBoard)

##Omaha_GetBestPossibleStraightIfSixHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfSixHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfSixHitsTheBoard >= BestPossibleStraightForVillainIfSixHitsTheBoard)

##Omaha_GetBestPossibleStraightIfFiveHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfFiveHitsTheBoard >= BestPossibleStraightForVillainIfFiveHitsTheBoard)

##Omaha_GetBestPossibleStraightIfFourHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfFourHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfFourHitsTheBoard >= BestPossibleStraightForVillainIfFourHitsTheBoard)

##Omaha_GetBestPossibleStraightIfThreeHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfThreeHitsTheBoard >= BestPossibleStraightForVillainIfThreeHitsTheBoard)

##Omaha_GetBestPossibleStraightIfTwoHitsTheBoard##
    (Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard != -1)
AND (Omaha_BestPossibleStraightForUsIfTwoHitsTheBoard >= BestPossibleStraightForVillainIfTwoHitsTheBoard)


##UnknownAces##
  ((~suitbitsplayer_hearts   >> ace) & 1)
+ ((~suitbitsplayer_diamonds >> ace) & 1)
+ ((~suitbitsplayer_clubs    >> ace) & 1)
+ ((~suitbitsplayer_spades   >> ace) & 1)

##UnknownKings##
  ((~suitbitsplayer_hearts   >> king) & 1)
+ ((~suitbitsplayer_diamonds >> king) & 1)
+ ((~suitbitsplayer_clubs    >> king) & 1)
+ ((~suitbitsplayer_spades   >> king) & 1)

##UnknownQueens##
  ((~suitbitsplayer_hearts   >> queen) & 1)
+ ((~suitbitsplayer_diamonds >> queen) & 1)
+ ((~suitbitsplayer_clubs    >> queen) & 1)
+ ((~suitbitsplayer_spades   >> queen) & 1)

##UnknownJacks##
  ((~suitbitsplayer_hearts   >> jack) & 1)
+ ((~suitbitsplayer_diamonds >> jack) & 1)
+ ((~suitbitsplayer_clubs    >> jack) & 1)
+ ((~suitbitsplayer_spades   >> jack) & 1)

##UnknownTens##
  ((~suitbitsplayer_hearts   >> ten) & 1)
+ ((~suitbitsplayer_diamonds >> ten) & 1)
+ ((~suitbitsplayer_clubs    >> ten) & 1)
+ ((~suitbitsplayer_spades   >> ten) & 1)

##UnknownNines##
  ((~suitbitsplayer_hearts   >> Nine) & 1)
+ ((~suitbitsplayer_diamonds >> Nine) & 1)
+ ((~suitbitsplayer_clubs    >> Nine) & 1)
+ ((~suitbitsplayer_spades   >> Nine) & 1)

##UnknownEights##
  ((~suitbitsplayer_hearts   >> Eight) & 1)
+ ((~suitbitsplayer_diamonds >> Eight) & 1)
+ ((~suitbitsplayer_clubs    >> Eight) & 1)
+ ((~suitbitsplayer_spades   >> Eight) & 1)

##UnknownSevens##
  ((~suitbitsplayer_hearts   >> Seven) & 1)
+ ((~suitbitsplayer_diamonds >> Seven) & 1)
+ ((~suitbitsplayer_clubs    >> Seven) & 1)
+ ((~suitbitsplayer_spades   >> Seven) & 1)

##UnknownSixes##
  ((~suitbitsplayer_hearts   >> Six) & 1)
+ ((~suitbitsplayer_diamonds >> Six) & 1)
+ ((~suitbitsplayer_clubs    >> Six) & 1)
+ ((~suitbitsplayer_spades   >> Six) & 1)

##UnknownFives##
  ((~suitbitsplayer_hearts   >> Five) & 1)
+ ((~suitbitsplayer_diamonds >> Five) & 1)
+ ((~suitbitsplayer_clubs    >> Five) & 1)
+ ((~suitbitsplayer_spades   >> Five) & 1)

##UnknownFours##
  ((~suitbitsplayer_hearts   >> Four) & 1)
+ ((~suitbitsplayer_diamonds >> Four) & 1)
+ ((~suitbitsplayer_clubs    >> Four) & 1)
+ ((~suitbitsplayer_spades   >> Four) & 1)

##UnknownThrees##
  ((~suitbitsplayer_hearts   >> Three) & 1)
+ ((~suitbitsplayer_diamonds >> Three) & 1)
+ ((~suitbitsplayer_clubs    >> Three) & 1)
+ ((~suitbitsplayer_spades   >> Three) & 1)

##UnknownTwos##
  ((~suitbitsplayer_hearts   >> Two) & 1)
+ ((~suitbitsplayer_diamonds >> Two) & 1)
+ ((~suitbitsplayer_clubs    >> Two) & 1)
+ ((~suitbitsplayer_spades   >> Two) & 1)

##HINT_You_Do_Not_Have_A_Straight##
-1
