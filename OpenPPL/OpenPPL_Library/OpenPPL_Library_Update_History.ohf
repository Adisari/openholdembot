##OpenPPL_License_Text##
//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for OpenPPL.
//   These functions will be loaded by OpenHoldem in the background
//   and will be available both for OpenPPL and OH-script users.
//   This library is mostly written in OH-script,
//   but it can be extended by OpenPPL-functions, as both formats are 100% compatible.
//
// OpenPPL is part of the OpenHoldem project
//   Source code:           http://code.google.com/p/openholdembot/
//   Download page:         https://sites.google.com/site/openholdempokerbot/downloads
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 7.0.2 or later
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Fqfq	
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Relhby
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
// OpenPPL - Update Of History Symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and not from the current gamestate either.
//
//*****************************************************************************

##CalculateMissingSmallBlind##
// True, if SB is missing, false otherwise
// Should be called at our first action preflop only.
WHEN [nopponentsdealt <= 0] RETURN False FORCE
WHEN [CurrentbetOfDealPosition1Chair == sblind] RETURN False FORCE
// If we are NOT the Second player to be dealt and see a bet 
// of 1 big blind left to the dealer, then it is the big blind (SB missing)
WHEN [(dealposition != 2) AND (CurrentbetOfDealPosition1Chair == bblind)] RETURN True FORCE
// Problematic is only the case when I am in "big blind" (Second player to be dealt)
// * if bet of DealPosition1Chair > 1 bblind then SB raised and is present
// * if bet = 1 big blind and players "behind me" did act, then SB is present and limped
// * if bet = 1 big blind and players behind me still to act, then SB is missing
WHEN [(dealposition == 2) AND (CurrentbetOfDealPosition1Chair > bblind)] RETURN False FORCE
// Case 2 and 3: precondition: bet = 1 big blind
WHEN [(dealposition == 2) AND PlayersBehindDealPosition2ChairDidAct] RETURN False FORCE
WHEN [(dealposition == 2) AND NOT PlayersBehindDealPosition2ChairDidAct] RETURN True FORCE
WHEN Others RETURN ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY FORCE

##CalculateStartingChips##
// Precondition: first hand, preflop
(currentbet + balance + ante)

##CalculateStartingStackSize##
// Precondition: first hand, preflop
WHEN (StartingChips <= 0) RETURN 0 FORCE
WHEN (bblind > 0) RETURN (StartingChips / bblind) FORCE
WHEN Others RETURN ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap FORCE

##UpdateMemorySymbolsOnHandReset##
WHEN ResetOldGameStateAtHandReset
WHEN Others
WHEN Others SET me_st_MemBotsLastPreflopAction_None
WHEN Others SET me_st_MemRaisesMemRaisesBeforeFlop_0
WHEN Others SET me_st_MemRaisesMemRaisesOnFlop_0
WHEN Others SET me_st_MemRaisesMemRaisesOnTurn_0
WHEN Others SET me_st_MaxOpponentStackSize_0
WHEN Others SET me_st_MinOpponentStackSize_0
WHEN Others SET me_st_MemBotsLastPreflopAction_None
// Reset starting chips and stacksize once at the beginning of the session
WHEN (handsplayed <= 1) SET me_st_MemStartingChips_0
WHEN (handsplayed <= 1) SET me_st_MemStartingChips_0
// Execute UpdateMemorySymbolsOnNewRound unconditionally, but don't do anything
WHEN UpdateMemorySymbolsOnNewRound

##UpdateMemorySymbolsOnNewRound##
WHEN Others SET me_st_MemRaises_0
WHEN Others SET me_st_MemChecks_0
WHEN Others SET me_st_MemCalls_0
WHEN Others SET me_st_MemBets_0

##UpdateMemorySymbolsAfterAutoplayerAction##
// This function is the preferred place to store and update memory symbola
// as it is our turn and we see stable frames, i.e. absence of casino animations
//
// At first we set the flag me_st_MemUpdateOfOpenPPLMemorySymbolsInProgress_True
// as during the update we have partially inconsistent information,
// as the OpenHoldem-symbols are already updated (e.g. didrais, ...).
// This could cause some OpenPPl-symbols like BotsActionsOnThisRoundIncludingChecks
// to be off by one, so we have to adapt.
// http://www.maxinmontreal.com/forums/viewtopic.php?f=120&t=20275&p=142396#p142396
WHEN Others SET me_st_MemUpdateOfOpenPPLMemorySymbolsInProgress_True
WHEN Others SET me_st_MemRaises_Raises
WHEN Others SET me_st_MemChecks_Checks
WHEN Others SET me_st_MemCalls_Calls
WHEN Others SET me_st_MemBets_Bets
WHEN (betround == ConstBetRoundPreflop) SET me_st_MemBotsLastPreflopAction_BotsLastAction
WHEN (betround == ConstBetRoundPreflop) SET me_st_MemRaisesMemRaisesBeforeFlop_Raises
WHEN (betround == ConstBetRoundFlop) SET me_st_MemRaisesMemRaisesOnFlop_Raises
WHEN (betround == ConstBetRoundTurn) SET me_st_MemRaisesMemRaisesOnTurn_Raises
WHEN (me_re_MemStartingChips <= 0) SET me_st_MemStartingChips_StartingChips
WHEN (me_re_MemStartingStackSize <= 0) SET me_st_MemStartingStackSize_StartingStackSize
WHEN (me_re_MemMaxOpponentStackSize <= 0) SET me_st_MemMaxOpponentStackSize_MaxOpponentStackSize
WHEN (me_re_MemMinOpponentStackSize <= 0) SET me_st_MemMinOpponentStackSize_MaxOpponentStackSize
WHEN (betround == ConstBetRoundPreflop) SET me_st_MemBotsLastPreflopAction_BotsLastAction
WHEN (betround == ConstBetRoundPreflop) SET me_st_MemMissingSmallBlind_MissingSmallBlind
// Finally remember a heartbeat ID so that be become able to detect
// if a symbol gets used before the next scrape (e.g by the debug-tab).
// In this case we have to return the new value (e.g. of "Raises")
// and not a computed result based on the "old" value + ActionsSinceLastPlay.
WHEN CreateHeartbeatIDAfterAutoplayerAction
// Terminating the open-ended when-condition above
// to execute the next one for sure.
WHEN Others
// Remember current game-state to avoid duplicte updates
// of memory-symbols in case an action has no effect.
WHEN RememberCurrentGameStateAfterAutoplayeraction
// Terminating the open-ended when-condition above
// to execute the next one for sure.
WHEN Others
WHEN Others SET me_st_MemUpdateOfOpenPPLMemorySymbolsInProgress_False

//*****************************************************************************
//
// Detecting already executed updates of memory-symbols
// that conflict with the normal way of evaluation
//
// Usually we calculate symbols like "Raises" based on old, stable values
// plus RaisesSinceLastPlay (based on nopponentstruelyraising, computed 
// with the info of the current orbit).
// This however does no longer work if we store a new "old" value
// at the end of my turn after an autoplayer action.
// True, all critical work is done, but code in other threads
// (especially the debug-tab) might request these symbols.
// Then Openholdem would temporarily display invalid info
// and people would be confused.
// To avoid countless "bug"-reports, we remember and compare
// a heartbeat-ID and then return the new value without
// any computed updates based on an old frame
// (that usually displays some ActionsSinceLastPlay by other players).
//
// Affected are the action counters
// Calls, Checks, Raises
//
//*****************************************************************************

##CreateHeartbeatIDAfterAutoplayerAction##
// As there are no heartbeat-counters 
// and we don't want things to complicated
// we use randomheartbeat as a "nearly unique" ID.
me_st_heartbeatID_randomheartbeat

##OpenPPLHistorySymbolsAlreadyUpdatedThisHeartbeatAfterAutoplayerAction##
WHEN (me_re_heartbeatID == randomheartbeat) RETURN True FORCE

//*****************************************************************************
//
// Avoid duplicate updates in case an autoplayer action had no effect.
// In this case we must not update the symbols again (increase counters, ...).
// To prevent this problem we remember the current game-state (partially)
// and then verify that it has changed.
// http://www.maxinmontreal.com/forums/viewtopic.php?f=110&t=19407
//
//*****************************************************************************

##GameStateChangedSinceLastAutoplayerAction##
// Change in dealerchair => new hand
   (dealerchair != me_re_MemOldGameStateDealerChair)
// Change in currentbet => we did act 
// and the autoplayer executed successfully   
OR (currentbet  != me_re_MemOldGameStateCurrentBet)
// Change in potsize: somebody else behind us acted, 
// so we checked or folded successfully
OR (pot			    != me_re_MemOldGameStatePotSize)
// Change in betround, if everybody checked 
// and potsize is the same
OR (betround    != me_re_MemOldGameStateBetround)

##RememberCurrentGameStateAfterAutoplayeraction##
// We can't use AND and OR here because of short circuiting.
// We must use an operator that evaluates both sites.
// The final result is meaningless.
    me_st_MemOldGameStateDealerChair_dealerchair
XOR me_st_MemOldGameStateCurrentBet_currentbet
XOR me_st_MemOldGameStatePotSize_pot
XOR me_st_MemOldGameStateBetround_betround

##ResetOldGameStateAtHandReset##
// We have to explicitly reset the old game-state at hand-reset,
// as RememberCurrentGameStateAfterAutoplayeraction won't get executed
// if a user simulates e.g. at Manualmode and just clicks "Reset".
// http://www.maxinmontreal.com/forums/viewtopic.php?f=261&t=20226#p142447
    me_st_MemOldGameStateDealerChair_0
XOR me_st_MemOldGameStateCurrentBet_0
XOR me_st_MemOldGameStatePotSize_0
XOR me_st_MemOldGameStateBetround_0