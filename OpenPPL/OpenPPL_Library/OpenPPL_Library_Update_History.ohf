##OpenPPL_License_Text##
//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for OpenPPL.
//   These functions will be loaded by OpenHoldem in the background
//   and will be available both for OpenPPL and OH-script users.
//   This library is mostly written in OH-script,
//   but it can be extended by OpenPPL-functions, as both formats are 100% compatible.
//
// OpenPPL is part of the OpenHoldem project
//   Source code:           http://code.google.com/p/openholdembot/
//   Download page:         https://sites.google.com/site/openholdempokerbot/downloads
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 7.0.2 or later
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Fqfq	
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Relhby
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
// OpenPPL - Update Of History Symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and not from the current gamestate either.
//
//*****************************************************************************

##CalculateChecks##
(BotsActionsOnThisRoundIncludingChecks == 0) ? ChecksInFrontOfHero :
// Stored value of checks on previous orbit plus players behind
(BotsActionsOnThisRoundIncludingChecks == 1) ? (Checks + ChecksAfterHero) :
// There can no longer be any checking players, so don't change anything
HINT_Nothing_To_Do_But_All_OK

##CalculateMissingSmallBlind##
// True, if SB is missing, false otherwise
// Should be called at our first action preflop only.
(CurrentbetOfDealPosition1Chair == sblind) ? False :
// If we are NOT the Second player to be dealt and see a bet 
// of 1 big blind left to the dealer, then it is the big blind (SB missing)
[(dealposition != 2) AND (CurrentbetOfDealPosition1Chair == bblind)] ? True :
// Problematic is only the case when I am in "big blind" (Second player to be dealt)
// * if bet of DealPosition1Chair > 1 bblind then SB raised and is present
// * if bet = 1 big blind and players "behind me" did act, then SB is present and limped
// * if bet = 1 big blind and players behind me still to act, then SB is missing
[(dealposition == 2) AND (CurrentbetOfDealPosition1Chair > bblind)] ? False :
// Case 2 and 3: precondition: bet = 1 big blind
[(dealposition == 2) AND PlayersBehindDealPosition2ChairDidAct] ? False :
[(dealposition == 2) AND NOT PlayersBehindDealPosition2ChairDidAct] ? True :
ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY
##Calculate_Raises##
(me_re_MemRaises + RaisesSinceLastPlay)

##CalculateStartingChips##
// Precondition: first hand, preflop
(bblind > 0) ? (currentbet + balance) : ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##CalculateStartingStackSize##
// Precondition: first hand, preflop
(bblind > 0) ? ((currentbet + balance + ante) / bblind) : ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##InitBets##
// No bet in front of us to call
((currentbet == 0) AND (AmountToCall == 0)) ? me_st_MemBets_0 :
// A bet to call and we didn't act before or we checked
((currentbet == 0) AND (AmountToCall > 0)) ? me_st_MemBets_1 :
// Otherwise: we did already bet ourself or call a bet.
// So don't change anything
HINT_Nothing_To_Do_But_All_OK

##InitBotsLastPreflopAction##
// Don't use BotsLastAction on the first orbit,
// because that variable has to be the last one to be initialized
// and is therefore undefined.
[(betround == ConstBetRoundPreflop) AND (BotsActionsOnThisRoundIncludingChecks == 0)] ? 
    me_st_MemBotsLastPreflopAction_None :
[(betround == ConstBetRoundPreflop) AND (BotsActionsOnThisRoundIncludingChecks > 0)] ? 
    me_st_MemBotsLastPreflopAction_BotsLastAction : 
[(betround == ConstBetRoundFlop) AND (BotsActionsOnThisRoundIncludingChecks == 0)] ?
    me_st_MemBotsLastPreflopAction_BotsLastAction : 0  
	
##InitCalls##
(BotsActionsOnThisRoundIncludingChecks == 0) ?
  me_st_MemCalls_nopponentscalling :
  me_st_MemCalls_AddNopponentscalling
  
##InitChecks##
(BotsActionsOnThisRound <= 1) ? me_st_MemChecks_CalculateChecks : 
HINT_Nothing_To_Do_But_All_OK

##InitMaxOpponentStackSize##
(betround == ConstBetRoundPreflop) ? me_st_MaxOpponentStackSize_MaxOpponentStackSizeCalculation : 
HINT_Nothing_To_Do_But_All_OK

##InitMinOpponentStackSize##
(betround == ConstBetRoundPreflop) ? me_st_MinOpponentStackSize_MinOpponentStackSizeCalculation :
HINT_Nothing_To_Do_But_All_OK

##InitMissingSmallBlind##
// !!! To be moved to OH
[(betround == ConstBetRoundPreflop) AND  (BotsActionsOnThisRoundIncludingChecks == 0)] ? 
me_st_MemMissingSmallBlind_CalculateMissingSmallBlind :
HINT_Nothing_To_Do_But_All_OK

##InitRaisesBeforeFlop##
(betround == ConstBetRoundPreflop) ? me_st_MemRaisesBeforeFlop_Raises : 
HINT_Nothing_To_Do_But_All_OK

##InitRaisesOnFlop##
(betround == ConstBetRoundFlop) ? me_st_MemRaisesOnFlop_Raises : 
HINT_Nothing_To_Do_But_All_OK

##InitRaisesOnTurn##
(betround == ConstBetRoundTurn) ? me_st_MemRaisesOnTurn_Raises : 
HINT_Nothing_To_Do_But_All_OK
  
##InitRaises##
(BotsActionsOnThisRoundIncludingChecks == 0) ? me_st_MemRaises_RaisesSinceLastPlay :
me_st_MemRaises_Calculate_Raises  

##InitStartingChips##
((handsplayed == 0 OR StartingChips == 0) AND (betround == ConstBetRoundPreflop)) ?
  me_st_MemStartingChips_CalculateStartingChips : HINT_Nothing_To_Do_But_All_OK

##InitStartingStackSize##
((handsplayed == 0 OR StartingStackSize == 0) AND (betround == ConstBetRoundPreflop)) ?
  me_st_MemStartingStackSize_CalculateStartingStackSize : HINT_Nothing_To_Do_But_All_OK
  
##GameStateChanged##
// Change in dealerchair => new hand
   (dealerchair != me_re_MemOldGameStateDealerChair)
// Change in currentbet => we did act 
// and the autoplayer executed successfully   
OR (currentbet  != me_re_MemOldGameStateCurrentBet)
// Change in potsize: somebody else behind us acted, 
// so we checked or folded successfully
OR (pot			    != me_re_MemOldGameStatePotSize)
// Change in betround, if everybody checked 
// and potsize is the same
OR (betround    != me_re_MemOldGameStateBetround)

##RememberCurrentGameState##
// We can't use AND and OR here because of short circuiting.
// We must use an operator that evaluates both sites.
// The final result is meaningless.
    me_st_MemOldGameStateDealerChair_dealerchair
XOR me_st_MemOldGameStateCurrentBet_currentbet
XOR me_st_MemOldGameStatePotSize_pot
XOR me_st_MemOldGameStateBetround_betround

##RememberRaiseCountersForSpecificBettingRounds##
WHEN (betround == ConstBetRoundPreflop) Set me_st_MemRaisesBeforeFlop_Raises
WHEN (betround == ConstBetRoundFlop)    Set me_st_MemRaisesOnFlop_Raises
WHEN (betround == ConstBetRoundTurn)    Set me_st_MemRaisesOnTurn_Raises

##RememberMemorySymbolsAtFirstAction##
// We call this function after the first action
// and not at handreset, as not all information 
// is guaranteed to be available at handreset (positions e.g.)
WHEN (betround != ConstBetRoundPreflop) RETURN 0 FALSE
WHEN (BotsActionsOnThisRoundIncludingChecks > 0) RETURN 0 FALSE
    me_st_MemStartingChips_StartingChips
XOR me_st_MemMissingSmallBlind_MissingSmallblind // avoid recursion!!!!!
XOR me_st_MemMaxOpponentStackSize_MaxOpponentStackSize
XOR me_st_MemBotsLastPreflopAction_None

##UpdateMemorySymbolseOnHandReset##
// Reset everything to zero
    me_st_MemRaises_0
XOR me_st_MemBets_0
XOR me_st_MemBotsLastPreflopAction_None
XOR me_st_MemCalls_0
XOR me_st_MemChecks_0
XOR me_st_MemMissingSmallBlind_0
XOR me_st_MaxOpponentStackSize_0
XOR me_st_MemRaisesBeforeFlop_0
XOR me_st_MemRaisesOnFlop_0
XOR me_st_MemRaisesOnTurn_0
XOR me_st_MemStartingChips_0
XOR RememberCurrentGameState

##UpdateMemorySymbolseOnNewRound##
// Reset history symbols for this round to zero
    me_st_MemRaises_0
XOR me_st_MemBets_0
XOR me_st_MemCalls_0
XOR me_st_MemChecks_0
XOR me_st_MemStartingChips_0
XOR RememberCurrentGameState

##UpdateMemorySymbolsAfterAutoplayerAction##
// Remember current value of action counters
WHEN NOT GameStateChanged RE$TURN HINT_NothingToDoButallOK FORCE
WHEN Others RETURN
    me_st_MemRaises_Raises
XOR me_st_MemBets_Bets
XOR me_st_MemCalls_Calls
XOR me_st_MemChecks_Checks
XOR RememberRaiseCountersForSpecificBettingRounds
XOR RememberMemorySymbolsAtFirstAction
XOR RememberCurrentGameState
FORCE







##InitMemorySymbols##
// In rare cases (or at OH-replay) it might happen,
// that autoplayer-actions don't have any effects.
// In this case we must not update the symbols again (increase counters, ...).
// However we have to update the heartbeat-ID to indicate
// that history symbols have been properly initialized.+
// http://www.maxinmontreal.com/forums/viewtopic.php?f=110&t=19407
WHEN NOT GameStateChanged RETURN RememberHeartbeatID FORCE	
// Memory symbols for game history have to be updated exactly once per turn
WHEN NOT TimeToInitMemorySymbols RETURN HINT_Nothing_To_Do_But_All_OK FORCE
// We can't use AND and OR here because of short circuiting.
// We must use an operator that evaluates both sites.
// The final result is meaningless.
//
// The heartbeat-ID has to be remembered first,
// because it is used to check if some history-symbols (Raises, Calls)
// are used correctly, at well-defined times only.
// And InitRaises, etc. will use them very soon -- and correctly.
WHEN Others RETURN (RememberHeartbeatID 
  XOR InitMissingSmallBlind 
  XOR InitBets
  XOR InitChecks
  XOR InitCalls
  XOR InitRaises
  XOR InitBotsLastPreflopAction
  XOR InitRaisesBeforeFlop
  XOR InitRaisesOnFlop
  XOR InitRaisesOnTurn
  XOR InitMaxOpponentStackSize
  XOR InitMinOpponentStackSize
  XOR InitStartingStackSize
  XOR InitStartingChips
  XOR RememberCurrentGameState)
FORCE  
FORCE  